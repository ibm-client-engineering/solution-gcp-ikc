---
title: "IBM Knowledge Catalog"
format: html
---

## Pre-Requirements



### Install Node Feature Discovery 

* Go to OperatorHub

* Search for "Node Feature Discovery"

* Install

### Create a NodeFeatureDisocvery CR

* Go to Installed Operators 

* Select "Node Feature Discovery"

* Select the box "Provided APIs"

* Select "Create Instance"

* Review the values

* Select "Create"

### Install "Nvidia GPU Operator"

* Go to OperatorHub

* Search for "Nvidia GPU Operator"

* Install

### Create "Cluster Policy" for Nvidia GPU Operator

* Go to "Installed Operators"

* Click on "Nvidia GPU Operator"

* Select "ClusterPolicy" tab

* Click "Create ClusterPolicy"

* Click "Create"



### Install OpenShift AI

Create redhat-ods-operator project:

```bash
oc new-project redhat-ods-operator
```

Create the rhods-operator operator group in the redhat-ods-operator project:

```yaml
cat <<EOF |oc apply -f -
apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: rhods-operator
  namespace: redhat-ods-operator
EOF
```

Create the rhods-operator operator subscription in the redhat-ods-operator project:

```yaml
cat <<EOF |oc apply -f -
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: rhods-operator
  namespace: redhat-ods-operator
spec:
  name: rhods-operator
  channel: stable-2.13
  source: redhat-operators
  sourceNamespace: openshift-marketplace
  config:
     env:
        - name: "DISABLE_DSC_CONFIG"
EOF
```

Create a DSC Initialization (DSCInitialization) object named default-dsci in the redhat-ods-monitoring project:

```yaml
cat <<EOF |oc apply -f -
apiVersion: dscinitialization.opendatahub.io/v1
kind: DSCInitialization
metadata:
  name: default-dsci
spec:
  applicationsNamespace: redhat-ods-applications
  monitoring:
    managementState: Managed
    namespace: redhat-ods-monitoring
  serviceMesh:
    managementState: Removed
  trustedCABundle:
    managementState: Managed
    customCABundle: ""
EOF
```

Check the status of the rhods-operator-* pod in the redhat-ods-operator project:

```bash
oc get pods -n redhat-ods-operator
```

Confirm that the pod is Running. The command returns a response with the following format:

```default
NAME                              READY   STATUS    RESTARTS   AGE
rhods-operator-56c85d44c9-vtk74   1/1     Running   0          3h57m
```

Check the phase of the DSC Initialization (DSCInitialization) object:

```bash
oc get dscinitialization
```

Confirm that the object is Ready. The command returns a response with the following format:

```default
NAME           AGE     PHASE
default-dsci   4d18h   Ready
```

Create a Data Science Cluster (DataScienceCluster) object named default-dsc:

```yaml
cat <<EOF |oc apply -f -
apiVersion: datasciencecluster.opendatahub.io/v1
kind: DataScienceCluster
metadata:
  name: default-dsc
spec:
  components:
    codeflare:
      managementState: Removed
    dashboard:
      managementState: Removed
    datasciencepipelines:
      managementState: Removed
    kserve:
      managementState: Managed
      defaultDeploymentMode: RawDeployment
      serving:
        managementState: Removed
        name: knative-serving
    kueue:
      managementState: Removed
    modelmeshserving:
      managementState: Removed
    ray:
      managementState: Removed
    trainingoperator:
      managementState: Managed
    trustyai:
      managementState: Removed
    workbenches:
      managementState: Removed
EOF
```

Wait for the Data Science Cluster object to be Ready.
To check the status of the object, run:

```bash
oc get datasciencecluster default-dsc -o jsonpath='"{.status.phase}" {"\n"}'
```

Confirm that the status of the following pods in the redhat-ods-applications project are Running:
kserve-controller-manager-* pod
kubeflow-training-operator-* pod
odh-model-controller-* pod


```bash
oc get pods -n redhat-ods-applications
```

The command returns a response with the following format:

```default
NAME                                         READY   STATUS      RESTARTS   AGE
kserve-controller-manager-57796d5b44-sh9n5   1/1     Running     0          4m57s
kubeflow-training-operator-7b99d5584c-rh5hb  1/1     Running     0          4m57s
```

Edit the inferenceservice-config configuration map in the redhat-ods-applications project:
Log in to the Red Hat OpenShift Container Platform web console as a cluster administrator.
From the navigation menu, select Workloads > Configmaps.
From the Project list, select redhat-ods-applications.
Click the inferenceservice-config resource. Then, open the YAML tab.
In the metadata.annotations section of the file, add opendatahub.io/managed: 'false':

```yaml
metadata:
  annotations:
    internal.config.kubernetes.io/previousKinds: ConfigMap
    internal.config.kubernetes.io/previousNames: inferenceservice-config
    internal.config.kubernetes.io/previousNamespaces: opendatahub
    opendatahub.io/managed: 'false'
```

Find the following entry in the file:

```yaml
"domainTemplate": "{{ .Name }}-{{ .Namespace }}.{{ .IngressDomain }}",
```

Update the value of the domainTemplate field to "example.com":

```yaml
"domainTemplate": "example.com",
```

click save.

## Installation

## Configuration
